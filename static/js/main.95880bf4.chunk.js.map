{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","updateState","forceUpdate","useCallback","accountAddress","setAccountAddress","candidatesCount","setCandidatesCount","candidatesList","setCandidatesList","selectedCandidate","setSelectedCandidate","showForm","setShowForm","loading","setLoading","balance","setBalance","setWeb3","electionContract","setElectionContract","console","log","useEffect","async","window","ethereum","web3","Web3","enable","catch","error","networkId","eth","net","getId","accounts","getAccounts","getBalance","alert","Election","Contract","ElectionContract","abi","networks","address","countElectionCandidates","methods","call","loadBlockchainData","iterator","candidateInfo","candidates","candidateInfoObject","candidateId","candidateName","candidateVoteCount","candidatesArray","push","getCandidatesList","check","voters","checkVoted","className","id","Table","bordered","map","candidate","index","key","onSubmit","vote","send","from","type","data-bs-toggle","aria-expanded","aria-labelledby","href","onClick","e","preventDefault","target","selectCandidate","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95880bf4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Table } from 'react-bootstrap';\r\nimport Web3 from 'web3';\r\nimport ElectionContract from \"./contracts/Election.json\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n  const [accountAddress, setAccountAddress] = useState(\"\");\r\n  const [candidatesCount, setCandidatesCount] = useState(0);\r\n  const [candidatesList, setCandidatesList] = useState([]);\r\n  const [selectedCandidate, setSelectedCandidate] = useState(null);\r\n  const [showForm, setShowForm] = useState(false);\r\n  // const [candidateResults, setCandidateResults] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const [balance, setBalance] = useState(0);\r\n  const [web3, setWeb3] = useState();\r\n  const [electionContract, setElectionContract] = useState(); \r\n\r\n  // console.log(\"accountAddress\", accountAddress);\r\n  // console.log(\"CandidatesCount: \", candidatesCount);\r\n  console.log(\"candidatesList: \", candidatesList);\r\n  // // console.log(\"candidateResults\", candidateResults);\r\n  console.log(\"selectedCandidate\", selectedCandidate);\r\n  console.log(\"balance\", balance);\r\n  // console.log(\"web3\", web3);\r\n  // console.log(\"electionContract\", electionContract);\r\n\r\n  const loadBlockchainData = async() => {\r\n    if(typeof window.ethereum !== 'undefined'){\r\n      const web3 = new Web3(window.ethereum);\r\n\r\n      window.ethereum.enable().catch(error => {\r\n        // User denied account access\r\n        console.log(\"ERROR: \", error);\r\n      });\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(\"NetworkId: \", networkId);\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Load Balance\r\n      if(typeof accounts[0] !== 'undefined'){\r\n        const balance = await web3.eth.getBalance(accounts[0]);\r\n        // this.setState({ account: accounts[0], balance, web3: web3});\r\n        setAccountAddress(accounts[0]);\r\n        setBalance(balance);\r\n        setWeb3(web3);\r\n      }else{\r\n        window.alert('Please Login with MetaMask');\r\n      } \r\n\r\n      // LOAD CONTRACTS\r\n      try{\r\n        const Election = new web3.eth.Contract(ElectionContract.abi, ElectionContract.networks[networkId].address);\r\n        setElectionContract(Election);\r\n\r\n        const countElectionCandidates = await Election.methods.candidatesCount().call();\r\n\r\n        // TODO: EVENT LISTENING for emitted events from Election\r\n\r\n        // Setting candidates count\r\n        setCandidatesCount(countElectionCandidates);\r\n\r\n      }catch(error){\r\n        console.log(\"ERROR encounterred while loading contracts\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n  const getCandidatesList = async() => {\r\n    for(let iterator = 1; iterator <= candidatesCount; iterator++){\r\n      const candidateInfo = await electionContract.methods.candidates(iterator).call();\r\n      console.log(\"candidateInfo:::\", candidateInfo);\r\n      let candidateId = candidateInfo[0];\r\n      let candidateName = candidateInfo[1];\r\n      let candidateVoteCount = candidateInfo[2];\r\n\r\n      // Create a new candidate object to be pushed into candidatesList \r\n      const candidateInfoObject = {\r\n        candidateId,\r\n        candidateName,\r\n        candidateVoteCount\r\n      }\r\n\r\n      // Copy current contents of candidatesList into candidatesArray\r\n      const candidatesArray = candidatesList;\r\n\r\n      // Push the created object `candidateInfoObject` into candidatesArray\r\n      candidatesArray.push(candidateInfoObject);\r\n\r\n      // Update the candidatesList\r\n      setCandidatesList(candidatesArray);\r\n    }\r\n  }\r\n\r\n  const castVote = async() => {\r\n    console.log(\"Vote Casted: \", selectedCandidate, accountAddress);\r\n    setLoading(true);\r\n    await electionContract.methods.vote(selectedCandidate).send({ from : accountAddress });\r\n    setLoading(false);\r\n    setShowForm(false);\r\n  }\r\n\r\n  const selectCandidate = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"CandidateSelected: \", e.target.id);\r\n    setSelectedCandidate(e.target.id);\r\n  }\r\n\r\n  const checkVoted = async() => {\r\n      const check = await electionContract.methods.voters(accountAddress).call();\r\n      console.log(\"Check in checkVoted: \", check);\r\n      if(check){\r\n        setShowForm(false);\r\n      }else{\r\n        setShowForm(true);\r\n      }\r\n      return check;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"INSIDE USEEFFECT::::::::::::::::::::::::::::::::::::::::::\");\r\n    loadBlockchainData();\r\n    if(electionContract && candidatesCount > 0){\r\n      console.log(\"Inside check for candidates count > 0 in useEffect\")\r\n      getCandidatesList();\r\n      checkVoted();\r\n    }\r\n  },[candidatesCount]);\r\n\r\n  return(\r\n    <div className=\"container\">\r\n      <div className=\"row electionContainerRow\">\r\n          <div className=\"col-lg-12 electionContainerColumn\">\r\n            <h1 className=\"electionResultsHeader\">Election Results</h1>       \r\n            {loading && \r\n              <div id=\"loader\">\r\n                <p className=\"text-center\">Loading...</p>\r\n              </div>\r\n            }\r\n            <div className=\"candidatesTableContainer\">\r\n              <Table bordered className=\"candidateListTable\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Candidate Name</th>\r\n                    <th>Candidates Vote Count</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  { candidatesList && candidatesList.map((candidate, index) => {\r\n                      return(\r\n                        <tr key={index}>\r\n                          <td>{candidate.candidateId}</td>\r\n                          <td>{candidate.candidateName}</td>\r\n                          <td>{candidate.candidateVoteCount}</td>\r\n                        </tr>\r\n                      )\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n            { showForm &&\r\n              <div className=\"formContainer\">\r\n                <form onSubmit={ castVote }>\r\n                  <div className=\"dropdown\">\r\n                    <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"candidatesDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                      {selectedCandidate == null ?\"Select Candidate\": candidatesList[selectedCandidate-1].candidateName}\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"candidatesDropdown\">\r\n                      { candidatesList && candidatesList.map((candidate, index) => {\r\n                          return(\r\n                            /* eslint-disable jsx-a11y/anchor-is-valid */\r\n                            <li key={index}><a className=\"dropdown-item\" href=\"#\" onClick={(e) => selectCandidate(e)} id={index+1}>{candidate.candidateName}</a></li>\r\n                          )\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\"castVoteButtonContainer\">\r\n                    <button onClick={forceUpdate} type=\"submit\" className=\"btn btn-primary\">Vote</button>\r\n                  </div>             \r\n                </form>\r\n               </div>\r\n            }   \r\n            <h3>Account Address:</h3>\r\n            \r\n            <p className=\"accountAddressClass\">{ accountAddress }</p>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}